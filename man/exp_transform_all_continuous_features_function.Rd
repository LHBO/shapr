% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/approach_vaeac.R
\name{exp_transform_all_continuous_features_function}
\alias{exp_transform_all_continuous_features_function}
\title{Transform Unbounded Features to Strictly Positive by Exp Function}
\usage{
exp_transform_all_continuous_features_function(data, one_hot_max_sizes)
}
\arguments{
\item{data}{Matrix/data.frame. Original data set where all continuous features are strictly positive.}

\item{one_hot_max_sizes}{An array of numeric of dimension p containing the one hot sizes of the p features.
The sizes for the continuous features can either be '0' or '1'.}
}
\value{
The input data where the continuous features have been exp-transformed.
}
\description{
Function that converts all continuous features by applying the exp function.
This ensures that unbounded features are strictly positive after the transformation.
}
\details{
Used for, e.g., Burr data and Abalone data.
}
\examples{
data = data.frame(matrix(rgamma(1000*3, 2), ncol = 3)) # Simulate positive data
data$X2 = factor(data$X2 >= 2) # Create a factor, larger than mean
one_hot_max_sizes = c(1,2,1)
print(data)
data_unbounded = log_transform_all_continuous_features_function(data, one_hot_max_sizes)
print(data_unbounded)
data_bounded = exp_transform_all_continuous_features_function(data_unbounded, one_hot_max_sizes)
print(data_bounded)
all.equal(data, data_bounded)
data = as.data.table(data) # convert to data table. Same functions works then too
print(data)
data_unbounded = log_transform_all_continuous_features_function(data, one_hot_max_sizes)
print(data_unbounded)
data_bounded = exp_transform_all_continuous_features_function(data_unbounded, one_hot_max_sizes)
print(data_bounded)
all.equal(data, data_bounded)
}
