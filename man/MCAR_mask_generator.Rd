% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/approach_vaeac.R
\name{MCAR_mask_generator}
\alias{MCAR_mask_generator}
\title{MCAR_mask_generator}
\usage{
MCAR_mask_generator(masking_ratio = 0.5, paired_sampling = FALSE)
}
\arguments{
\item{masking_ratio}{The probability for an entry in the generated mask to be 1 (masked).}

\item{paired_sampling}{Boolean. If we are doing paired sampling. So include both S and \bar{S}.
If TRUE, then batch must be sampled using 'paired_sampler' which creates batches where
the first half and second half of the rows are duplicates of each other. That is,
batch = \link{row1, row1, row2, row2, row3, row3, ...}.}

\item{batch}{Matrix/Tensor. Only used to get the dimensions and to check if any of the
entries are missing. If any are missing, then the returned mask will ensure that
these missing entries are masked.}

\item{prob}{Numeric between 0 and 1. The probability that an entry will be masked.}

\item{seed}{Integer. Used to set the seed for the sampling process such that we
can reproduce the same masks.}
}
\value{
A binary matrix of the same size as 'batch'. An entry of '1' indicates that the
observed feature value will be masked. '0' means that the entry is NOT masked,
i.e., the feature value will be observed/given/available.
}
\description{
Initialize a missing completely at random mask generator.

Generates a MCAR mask by calling self$MCAR_mask_generator_function function.

A mask generator where the masking is determined by component-wise
independent Bernoulli distribution.
}
\details{
Function that takes in a batch of observations and the probability
of masking each element based on a component-wise independent Bernoulli
distribution. Default value is 0.5, so all masks are equally likely to be trained.
Function returns the mask of same shape as batch.
Note that the batch can contain missing values, indicated by the "NaN" token.
The mask will always mask missing values.
}
\examples{
mask_gen = MCAR_mask_generator(0.5)
mask_gen(torch::torch_randn(c(5, 3)))
 MCAR_mask_generator_function(torch::torch_rand(c(5, 3)))
}
