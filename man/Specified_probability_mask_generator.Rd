% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/approach_vaeac.R
\name{Specified_probability_mask_generator}
\alias{Specified_probability_mask_generator}
\title{Specified_probability_mask_generator}
\usage{
Specified_probability_mask_generator(masking_probs, paired_sampling = FALSE)
}
\arguments{
\item{masking_probs}{An M+1 numerics containing the probabilities masking 'd' (0,...M) entries for each observation.}

\item{paired_sampling}{Boolean. If we are doing paired sampling. So include both S and \bar{S}.
If TRUE, then batch must be sampled using 'paired_sampler' which creates batches where
the first half and second half of the rows are duplicates of each other. That is,
batch = \link{row1, row1, row2, row2, row3, row3, ...}.}

\item{batch}{Matrix/Tensor. Only used to get the dimensions and to check if any of the
entries are missing. If any are missing, then the returned mask will ensure that
these missing entries are masked.}

\item{seed}{Integer. Used to set the seed for the sampling process such that we
can reproduce the same masks.}
}
\value{
A binary matrix of the same size as 'batch'. An entry of '1' indicates that the
observed feature value will be masked. '0' means that the entry is NOT masked,
i.e., the feature value will be observed/given/available.
}
\description{
Initialize a specified_probability mask generator.

Generates a specified probability mask by calling the self$Specified_probability_mask_generator_function.

A mask generator that first samples the number of entries 'd' to be masked in
the 'M'-dimensional observation 'x' in the batch based on the given M+1 probabilities. The
'd' masked are uniformly sampled from the 'M' possible feature indices. The d'th entry
of the probability of having d-1 masked values.
}
\details{
A class that takes in the probabilities of having d masked observations.  I.e., for M dimensional data,
masking_probs is of length M+1, where the d'th entry is the probability of having d-1 masked values.

Note that MCAR_mask_generator with p = 0.5 is the same as using Specified_probability_mask_generator
with masking_ratio = choose(M, 0:M), where M is the number of features. This function was initially
created to check if increasing the probability of having a masks with many masked features improved
VAEAC's performance by focusing more on these situations during training.
}
\examples{
probs = c(1, 8, 6, 3, 2)
mask_gen = Specified_probability_mask_generator(probs)
masks = mask_gen(torch::torch_randn(c(10000, length(probs))-1))
empirical_prob = table(as.array(masks$sum(2)))
empirical_prob / sum(empirical_prob)
probs / sum(probs)
 Specified_probability_mask_generator_function(torch::torch_rand(c(5, 4)), masking_probs = c(2,7,5,3,3))
}
