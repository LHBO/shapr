% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/approach_regression_separate.R
\name{regression_train}
\alias{regression_train}
\title{Train a tidymodels model via workflows}
\usage{
regression_train(
  x,
  seed = 1,
  verbose = 0,
  regression_model = parsnip::linear_reg(),
  regression_tune = FALSE,
  regression_tune_values = NULL,
  regression_vfold_cv_para = NULL,
  regression_recipe_func = NULL,
  regression_response_var = "y_hat",
  regression_sur_n_comb = NULL
)
}
\arguments{
\item{x}{Data.table containing the data. Either the training data or the explicands. If \code{x} is the explicands,
then \code{index_features} must be provided.}

\item{seed}{Positive integer.
Specifies the seed before any randomness based code is being run.
If \code{NULL} the seed will be inherited from the calling environment.}

\item{verbose}{An integer specifying the level of verbosity. If \code{0}, \code{shapr} will stay silent.
If \code{1}, it will print information about performance. If \code{2}, some additional information will be printed out.
Use \code{0} (default) for no verbosity, \code{1} for low verbose, and \code{2} for high verbose.
TODO: Make this clearer when we end up fixing this and if they should force a progressr bar.}

\item{regression_model}{A \code{tidymodels} object of class \code{model_specs}. Default is a linear regression model, i.e.,
\code{\link[parsnip:linear_reg]{parsnip::linear_reg()}}. See \href{https://www.tidymodels.org/find/parsnip/}{tidymodels} for all possible models,
and see the vignette for how to add new/own models.}

\item{regression_tune}{Logical (default is \code{FALSE}). If \code{TRUE}, then we are to tune the hyperparemeters based on
the values provided in \code{regression_tune_values}. Note that no checks are conducted as this is checked earlier in
\code{setup_approach.regression_separate} and \code{setup_approach.regression_surrogate}.}

\item{regression_tune_values}{Either \code{NULL} (default), a data.frame/data.table/tibble, or a function.
The data.frame must contain the possible hyperparameter value combinations to try.
The column names must match the names of the tuneable parameters specified in \code{regression_model}.
If \code{regression_tune_values} is a function, then it should take one argument \code{x} which is the training data
for the current combination/coalition and returns a data.frame/data.table/tibble with the properties described above.
Using a function allows the hyperparameter values to change based on the size of the combination. See the regression
vignette for several examples.}

\item{regression_vfold_cv_para}{Either \code{NULL} (default) or a named list containing
the parameters to be sent to \code{\link[rsample:vfold_cv]{rsample::vfold_cv()}}. See the regression vignette for
several examples.}

\item{regression_recipe_func}{Either \code{NULL} (default) or a function that that takes in a \code{\link[recipes:recipe]{recipes::recipe()}}
object and returns a modified \code{\link[recipes:recipe]{recipes::recipe()}} with potentially additional recipe steps. See the regression
vignette for several examples.}

\item{regression_response_var}{String (default is \code{y_hat}) containing the name of the response variable.}

\item{regression_sur_n_comb}{Integer (default is \code{NULL}). The number of times each training observations
has been augmented. If \code{NULL}, then we assume that we are doing separate regression.}
}
\value{
A trained \code{tidymodels} model based on the provided input parameters.
}
\description{
Function that trains a \code{tidymodels} model via \code{workflows} based on the provided input parameters.
This function allows for cross validating the hyperparameters of the model.
}
\author{
Lars Henry Berge Olsen
}
\keyword{internal}
